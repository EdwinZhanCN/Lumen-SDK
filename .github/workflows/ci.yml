name: CI

on:
    push:
        branches: [main, dev]
    pull_request:
        branches: [main]

env:
    GO_VERSION: "1.21"

jobs:
    test:
        name: Test
        runs-on: ubuntu-latest
        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Setup Go
              uses: actions/setup-go@v4
              with:
                  go-version: ${{ env.GO_VERSION }}

            - name: Cache Go modules
              uses: actions/cache@v3
              with:
                  path: |
                      ~/.cache/go-build
                      ~/go/pkg/mod
                  key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
                  restore-keys: |
                      ${{ runner.os }}-go-

            - name: Download dependencies
              run: go mod download

            - name: Verify dependencies
              run: go mod verify

            - name: Run tests
              run: go test -v -race -coverprofile=coverage.out ./...

            - name: Upload coverage to Codecov
              uses: codecov/codecov-action@v3
              with:
                  file: ./coverage.out
                  token: ${{ secrets.CODECOV_TOKEN }}

    lint:
        name: Lint
        runs-on: ubuntu-latest
        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Setup Go
              uses: actions/setup-go@v4
              with:
                  go-version: ${{ env.GO_VERSION }}

            - name: Run golangci-lint
              uses: golangci/golangci-lint-action@v3
              with:
                  version: latest
                  args: --timeout=5m

    security:
        name: Security Scan
        runs-on: ubuntu-latest
        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Setup Go
              uses: actions/setup-go@v4
              with:
                  go-version: ${{ env.GO_VERSION }}

            - name: Run Gosec Security Scanner
              uses: securecodewarrior/github-action-gosec@master
              with:
                  args: "./..."

            - name: Run Trivy vulnerability scanner
              uses: aquasecurity/trivy-action@master
              with:
                  scan-type: "fs"
                  scan-ref: "."
                  format: "sarif"
                  output: "trivy-results.sarif"

            - name: Upload Trivy scan results to GitHub Security tab
              uses: github/codeql-action/upload-sarif@v2
              with:
                  sarif_file: "trivy-results.sarif"

    build:
        name: Build
        runs-on: ubuntu-latest
        strategy:
            matrix:
                goos: [linux, darwin, windows]
                goarch: [amd64, arm64]
                exclude:
                    - goos: windows
                      goarch: arm64
        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Setup Go
              uses: actions/setup-go@v4
              with:
                  go-version: ${{ env.GO_VERSION }}

            - name: Build binary
              env:
                  GOOS: ${{ matrix.goos }}
                  GOARCH: ${{ matrix.goarch }}
              run: |
                  mkdir -p dist

                  # Build lumenhubd
                  CGO_ENABLED=0 go build \
                    -ldflags="-s -w" \
                    -o dist/lumenhubd-${{ matrix.goos }}-${{ matrix.goarch }}${{ matrix.goos == 'windows' && '.exe' || '' }} \
                    ./cmd/lumenhubd

                  # Build lumenhub
                  CGO_ENABLED=0 go build \
                    -ldflags="-s -w" \
                    -o dist/lumenhub-${{ matrix.goos }}-${{ matrix.goarch }}${{ matrix.goos == 'windows' && '.exe' || '' }} \
                    ./cmd/lumenhub

            - name: Test binary execution
              if: matrix.goos == 'linux' && matrix.goarch == 'amd64'
              run: |
                  ./dist/lumenhubd-${{ matrix.goos }}-${{ matrix.goarch }} --help
                  ./dist/lumenhub-${{ matrix.goos }}-${{ matrix.goarch }} --help

    docker:
        name: Docker Build Test
        runs-on: ubuntu-latest
        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Setup Docker Buildx
              uses: docker/setup-buildx-action@v3

            - name: Build Docker image
              uses: docker/build-push-action@v5
              with:
                  context: .
                  platforms: linux/amd64,linux/arm64
                  push: false
                  tags: lumenhub:test
                  cache-from: type=gha
                  cache-to: type=gha,mode=max

    integration:
        name: Integration Tests
        runs-on: ubuntu-latest
        needs: [test, build]
        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Download build artifacts
              uses: actions/download-artifact@v3
              with:
                  name: build-linux-amd64
                  path: ./

            - name: Make binaries executable
              run: chmod +x lumenhubd-linux-amd64 lumenhub-linux-amd64

            - name: Start daemon
              run: |
                  ./lumenhubd-linux-amd64 --preset minimal &
                  DAEMON_PID=$!
                  echo "DAEMON_PID=$DAEMON_PID" >> $GITHUB_ENV
                  sleep 5

            - name: Test CLI commands
              run: |
                  ./lumenhub-linux-amd64 status --host localhost --port 8080
                  ./lumenhub-linux-amd64 node list --host localhost --port 8080
                  ./lumenhub-linux-amd64 --help

            - name: Cleanup
              if: always()
              run: |
                  if [ -n "$DAEMON_PID" ]; then
                    kill $DAEMON_PID || true
                  fi
