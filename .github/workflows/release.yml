name: Release

on:
    push:
        tags:
            - "v*"

env:
    GO_VERSION: "1.21"
    REGISTRY: ghcr.io
    IMAGE_NAME: ${{ github.repository }}

jobs:
    test:
        name: Test
        runs-on: ubuntu-latest
        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Setup Go
              uses: actions/setup-go@v4
              with:
                  go-version: ${{ env.GO_VERSION }}

            - name: Cache Go modules
              uses: actions/cache@v3
              with:
                  path: |
                      ~/.cache/go-build
                      ~/go/pkg/mod
                  key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
                  restore-keys: |
                      ${{ runner.os }}-go-

            - name: Download dependencies
              run: go mod download

            - name: Run tests
              run: go test -v -race -coverprofile=coverage.out ./...

            - name: Upload coverage to Codecov
              uses: codecov/codecov-action@v3
              with:
                  file: ./coverage.out
                  token: ${{ secrets.CODECOV_TOKEN }}

    build:
        name: Build
        runs-on: ubuntu-latest
        needs: test
        strategy:
            matrix:
                goos: [linux, darwin, windows]
                goarch: [amd64, arm64]
                exclude:
                    - goos: windows
                      goarch: arm64
        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Setup Go
              uses: actions/setup-go@v4
              with:
                  go-version: ${{ env.GO_VERSION }}

            - name: Get version
              id: version
              run: echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

            - name: Build binary
              env:
                  GOOS: ${{ matrix.goos }}
                  GOARCH: ${{ matrix.goarch }}
                  VERSION: ${{ steps.version.outputs.VERSION }}
                  COMMIT: ${{ github.sha }}
              run: |
                  mkdir -p dist

                  # Build lumenhubd
                  CGO_ENABLED=0 go build \
                    -ldflags="-X 'main.Version=$VERSION' -X 'main.Commit=$COMMIT' -X 'main.BuildTime=$(date -u +%Y-%m-%dT%H:%M:%SZ)'" \
                    -o dist/lumenhubd-${{ matrix.goos }}-${{ matrix.goarch }}${{ matrix.goos == 'windows' && '.exe' || '' }} \
                    ./cmd/lumenhubd

                  # Build lumenhub
                  CGO_ENABLED=0 go build \
                    -ldflags="-X 'main.Version=$VERSION' -X 'main.Commit=$COMMIT' -X 'main.BuildTime=$(date -u +%Y-%m-%dT%H:%M:%SZ)'" \
                    -o dist/lumenhub-${{ matrix.goos }}-${{ matrix.goarch }}${{ matrix.goos == 'windows' && '.exe' || '' }} \
                    ./cmd/lumenhub

            - name: Create archive
              run: |
                  cd dist
                  if [ "${{ matrix.goos }}" = "windows" ]; then
                    7z a lumenhub-${{ steps.version.outputs.VERSION }}-${{ matrix.goos }}-${{ matrix.goarch }}.zip lumenhubd-*.exe lumenhub-*.exe
                  else
                    tar -czf lumenhub-${{ steps.version.outputs.VERSION }}-${{ matrix.goos }}-${{ matrix.goarch }}.tar.gz lumenhubd-* lumenhub-*
                  fi

            - name: Upload build artifacts
              uses: actions/upload-artifact@v4
              with:
                  name: build-${{ matrix.goos }}-${{ matrix.goarch }}
                  path: dist/lumenhub-*.tar.gz dist/lumenhub-*.zip
                  retention-days: 30

    docker:
        name: Build Docker Images
        runs-on: ubuntu-latest
        needs: test
        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Setup Docker Buildx
              uses: docker/setup-buildx-action@v3

            - name: Log in to Container Registry
              uses: docker/login-action@v3
              with:
                  registry: ${{ env.REGISTRY }}
                  username: ${{ github.actor }}
                  password: ${{ secrets.GITHUB_TOKEN }}

            - name: Extract metadata
              id: meta
              uses: docker/metadata-action@v5
              with:
                  images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
                  tags: |
                      type=ref,event=tag
                      type=raw,value=latest,enable={{is_default_branch}}

            - name: Get version
              id: version
              run: echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

            - name: Build and push Docker image
              uses: docker/build-push-action@v5
              with:
                  context: .
                  platforms: linux/amd64,linux/arm64
                  push: true
                  tags: ${{ steps.meta.outputs.tags }}
                  labels: ${{ steps.meta.outputs.labels }}
                  build-args: |
                      VERSION=${{ steps.version.outputs.VERSION }}
                      COMMIT=${{ github.sha }}
                      BUILD_TIME=$(date -u +%Y-%m-%dT%H:%M:%SZ)

    release:
        name: Create Release
        runs-on: ubuntu-latest
        needs: [test, build, docker]
        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Download all artifacts
              uses: actions/download-artifact@v3
              with:
                  path: artifacts

            - name: Get version
              id: version
              run: echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

            - name: Create release notes
              id: release_notes
              run: |
                  # Generate release notes from commit history since last tag
                  PREV_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
                  if [ -n "$PREV_TAG" ]; then
                    git log --pretty=format:"- %s (%h)" $PREV_TAG..HEAD > release_notes.txt
                  else
                    git log --pretty=format:"- %s (%h)" > release_notes.txt
                  fi
                  echo "notes<<EOF" >> $GITHUB_OUTPUT
                  cat release_notes.txt >> $GITHUB_OUTPUT
                  echo "EOF" >> $GITHUB_OUTPUT

            - name: Create Release
              uses: softprops/action-gh-release@v1
              with:
                  tag_name: ${{ steps.version.outputs.VERSION }}
                  name: Release ${{ steps.version.outputs.VERSION }}
                  body: |
                      # Lumen Hub ${{ steps.version.outputs.VERSION }}

                      ## ðŸš€ Installation

                      ### Download Binaries
                      ```bash
                      # Linux AMD64
                      curl -L https://github.com/${{ github.repository }}/releases/download/${{ steps.version.outputs.VERSION }}/lumenhub-${{ steps.version.outputs.VERSION }}-linux-amd64.tar.gz | tar xz
                      sudo mv lumenhubd lumenhub /usr/local/bin/

                      # macOS AMD64
                      curl -L https://github.com/${{ github.repository }}/releases/download/${{ steps.version.outputs.VERSION }}/lumenhub-${{ steps.version.outputs.VERSION }}-darwin-amd64.tar.gz | tar xz
                      sudo mv lumenhubd lumenhub /usr/local/bin/

                      # Linux ARM64
                      curl -L https://github.com/${{ github.repository }}/releases/download/${{ steps.version.outputs.VERSION }}/lumenhub-${{ steps.version.outputs.VERSION }}-linux-arm64.tar.gz | tar xz
                      sudo mv lumenhubd lumenhub /usr/local/bin/

                      # macOS ARM64
                      curl -L https://github.com/${{ github.repository }}/releases/download/${{ steps.version.outputs.VERSION }}/lumenhub-${{ steps.version.outputs.VERSION }}-darwin-arm64.tar.gz | tar xz
                      sudo mv lumenhubd lumenhub /usr/local/bin/
                      ```

                      ### Docker
                      ```bash
                      docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.version.outputs.VERSION }}
                      docker run -d --name lumenhub -p 8080:8080 ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.version.outputs.VERSION }}
                      ```

                      ## ðŸ“‹ Changes
                      ${{ steps.release_notes.outputs.notes }}

                      ---
                      ðŸ“– [Documentation](https://github.com/${{ github.repository }}/blob/main/README.md)
                  draft: false
                  prerelease: false
                  files: |
                      artifacts/build-*/lumenhub-*.tar.gz
                      artifacts/build-*/lumenhub-*.zip

            - name: Update latest tag
              if: startsWith(github.ref, 'refs/tags/')
              run: |
                  git config --local user.email "action@github.com"
                  git config --local user.name "GitHub Action"
                  git tag -f latest
                  git push -f origin latest
